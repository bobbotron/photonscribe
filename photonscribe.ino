#include <FastLED.h>

#define LED_PIN     6
#define NUM_LEDS    41
#define BRIGHTNESS  64
#define LED_TYPE    WS2812B
#define COLOR_ORDER GRB

#define BUTTON_1 A1
#define BUTTON_2 A0
#define BUTTON_3 A2
#define BUTTON_4 A3

#define MODES 5

CRGB leds[NUM_LEDS];

#define UPDATES_PER_SECOND 60

CRGBPalette16 currentPalette;
TBlendType    currentBlending;

extern CRGBPalette16 myRedWhiteBluePalette;
extern const TProgmemPalette16 myRedWhiteBluePalette_p PROGMEM;

int mode = 0;

int fade = -255;

int cylonMin = 0;
int cylonMax = NUM_LEDS;
int cylon = 0;
int cylonAdder = 1;

unsigned cautionCounter = 0;

/** 
 *  There are 4 buttons in the circuit, saves creating 
 *  similar variables for each button.
 **/
struct ButtonState {
  unsigned long lastUpdate = 0;
  int currentState = 0;
  int pin;
};

ButtonState buttons[4];

void setup() {
    delay( 3000 ); // power-up safety delay

    // initialize button state
    buttons[0].pin = BUTTON_1;
    buttons[1].pin = BUTTON_2;
    buttons[2].pin = BUTTON_3;
    buttons[3].pin = BUTTON_4;

    for (int i=0; i< 4; i++)
    {
      pinMode(buttons[i].pin, INPUT_PULLUP);
      buttons[i].currentState = digitalRead(buttons[i].pin);
      buttons[i].lastUpdate = millis();
    }
    
    FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection( TypicalLEDStrip );
    FastLED.setBrightness(  BRIGHTNESS );
    
    currentPalette = RainbowColors_p;
    currentBlending = LINEARBLEND;

    playStartupAnimation();
}

void playStartupAnimation()
{
  for (int i=0; i<3; i++)
  {
    for (int j=0; j<3; j++)
    {
      leds[j] = CHSV( i*50, 256, 60);
    }
    
    FastLED.show();
    FastLED.delay(200);
    
    blackOut();
    FastLED.delay(200);
  }
}

void loop()
{
    
    // Call render function based on mode, should be a switch statement
    if (mode == 0)
    {
      RandoLED();
    }
    if (mode == 1)
    {
      RainbowLED();
    }
    if (mode == 2)
    {
      Cylon();
    }
    if (mode == 3)
    {
      RandoGoldLED();
    }
//    if (mode == 4)
//    {
//      CautionTape();
//    }
    if (mode == 4)
    {
      EyeImg();
    }
    FastLED.show();
    FastLED.delay(1000 / UPDATES_PER_SECOND);

    const long t = millis();

    // check mode select button
    if(t-buttons[1].lastUpdate > 50)
    {
      
      int key2S = digitalRead(BUTTON_2);
      if (buttons[1].currentState != key2S) {
        buttons[1].currentState = key2S;
    
        if (!key2S)
        {
          blackOut();
          leds[0].setRGB(100,100,100);
          leds[1].setRGB(100,100,100);
          
          FastLED.show();
          mode++;
          if (mode == MODES)
          {
            mode = 0;
          }
          delay(200);
        }
        else
        {
          blackOut();
        }
      }
      
      buttons[1].lastUpdate = t;
    }
}

void RandoLED()
{
  for( int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV( 0, 0, max(0, random8(255) + fade));
  }
  
    const long t = millis();
    if (t - buttons[0].lastUpdate > 50) {
      int key1S = digitalRead(BUTTON_1);// read if key1 is pressed
       if(!key1S){
        // fade in
        fade = min(0, fade + 2);
       }
       else{
        // fade out
        fade = max(-255, fade - 2);
       }

       buttons[0].lastUpdate = t;
    }
}

void RandoGoldLED()
{
  for( int i = 0; i < NUM_LEDS; i++) {
    if (random8() > 30)
    {
      leds[i] = CHSV( random8(40), 255, max(0, random8(255) + fade));
    }
    else
    {
      leds[i] = CHSV( random8(10)+150, 255, max(0, random8(255) + fade));
    }
  }
  
    const long t = millis();
    if (t - buttons[0].lastUpdate > 50) {
      int key1S = digitalRead(BUTTON_1);// read if key1 is pressed
       if(!key1S){
        // fade in
        fade = min(0, fade + 2);
       }
       else{
        // fade out
        fade = max(-255, fade - 2);
       }

       buttons[0].lastUpdate = t;
    }
}

void RainbowLED()
{
  int key1S = digitalRead(BUTTON_1);// read if key1 is pressed
  if(!key1S){
    for( int i = 1; i < 3; i++) {
      leds[i].setRGB(255,255,255);
    }
    
    // red
    for( int i = 3; i < 9; i++) {
      leds[i].setRGB(228, 3, 3);
    }

    // orange
    for( int i = 9; i < 15; i++) {
      leds[i].setRGB(255, 140, 0);
    }

    // yellow 255, 237, 0
    for( int i = 15; i < 21; i++) {
      leds[i].setRGB(255, 237, 0);
    }

    // green 0, 128, 38
    for( int i = 21; i < 27; i++) {
      leds[i].setRGB(0, 128, 38);
    }

    // indigo 36, 64, 142
    for( int i = 27; i < 33; i++) {
      leds[i].setRGB(36, 64, 142);
    }
    
    // violet 115, 41, 130
    for (int i = 33; i < 39; i++) {
      leds[i].setRGB(115, 41, 130);
    }
    
    // white strip
    for (int i = 39; i < NUM_LEDS; i++) {
      leds[i].setRGB(255,255,255);
    }
    
  }
  else
  {
    blackOut();
  }
}

void Cylon()
{
  int key1S = digitalRead(BUTTON_1);// read if key1 is pressed
  if(!key1S){
    cylon = cylon + cylonAdder;
    
    if (cylon >= cylonMax)
    {
      cylonAdder = -1;
    }
    else if (cylon <= cylonMin)
    {
      cylonAdder = 1;
    }
    
    fadeToBlackBy(leds, NUM_LEDS, 20);
    for( int i = 0; i < NUM_LEDS; i++) {
      int distanceToCylon = abs(cylon-i);
      if (distanceToCylon < 2)
      {
      //leds[i] = CHSV( 0, 0, min(255, (NUM_LEDS - distanceToCylon) * 6));
      leds[i] = CHSV( 0, 0, 255);
      }
      else 
      {
        //leds[i] = CHSV( 0, 0, 0);
      }
    }
    
  }
  else
  {
    // blackOut();
    fadeToBlackBy(leds, NUM_LEDS, 20);
  }
}


void blackOut()
{
  for( int i = 0; i < NUM_LEDS; i++) {
      leds[i] = CHSV( 0, 0, 0);
    }
}

//void CautionTape()
//{
//  int key1S = digitalRead(BUTTON_1);// read if key1 is pressed
//  if(!key1S){
//    cautionCounter++;
//  
//    for (int i=0; i< NUM_LEDS; i++)
//    {
//      unsigned ccl = ((i*2) + cautionCounter) % 200;
//      if (ccl < 100)
//      {
//        leds[i]= CRGB::Black;
//      }
//      else
//      {
//        leds[i].setRGB(255, 237, 0);
//      }
//    }
//  }
//  else 
//  {
//    blackOut();
//  }
//}

int eyeIndex = -1;

// converted using https://lvgl.io/tools/imageconverter
const uint16_t eye_map[] PROGMEM = {
  0xfe, 0xfe, 0xfe, 0xff,   /*Color of index 0*/
  0xd4, 0xd4, 0xd4, 0xff,   /*Color of index 1*/
  0xc2, 0xc2, 0xc2, 0xff,   /*Color of index 2*/
  0x9a, 0x9a, 0x9a, 0xff,   /*Color of index 3*/
  0x79, 0x79, 0x79, 0xff,   /*Color of index 4*/
  0x72, 0x72, 0x72, 0xff,   /*Color of index 5*/
  0x63, 0x63, 0x63, 0xff,   /*Color of index 6*/
  0x5f, 0x5f, 0x5f, 0xff,   /*Color of index 7*/
  0x58, 0x58, 0x58, 0xff,   /*Color of index 8*/
  0x4a, 0x4a, 0x4a, 0xff,   /*Color of index 9*/
  0x32, 0x32, 0x32, 0xff,   /*Color of index 10*/
  0x2f, 0x2f, 0x2f, 0xff,   /*Color of index 11*/
  0x2a, 0x2a, 0x2a, 0xff,   /*Color of index 12*/
  0x23, 0x23, 0x23, 0xff,   /*Color of index 13*/
  0x00, 0x00, 0x00, 0xff,   /*Color of index 14*/
  0xa6, 0xa6, 0xa7, 0xff,   /*Color of index 15*/
  0x91, 0x92, 0x92, 0xff,   /*Color of index 16*/
  0xe5, 0xe6, 0xe5, 0xff,   /*Color of index 17*/
  0xcc, 0xcd, 0xcc, 0xff,   /*Color of index 18*/
  0x68, 0x69, 0x68, 0xff,   /*Color of index 19*/
  0x66, 0x67, 0x66, 0xff,   /*Color of index 20*/
  0x55, 0x56, 0x55, 0xff,   /*Color of index 21*/
  0x1e, 0x1f, 0x1e, 0xff,   /*Color of index 22*/
  0xf7, 0xf8, 0xf6, 0xff,   /*Color of index 23*/
  0xf3, 0xf4, 0xf2, 0xff,   /*Color of index 24*/
  0xc8, 0xc9, 0xc7, 0xff,   /*Color of index 25*/
  0xba, 0xbb, 0xb9, 0xff,   /*Color of index 26*/
  0xb3, 0xb4, 0xb2, 0xff,   /*Color of index 27*/
  0xad, 0xae, 0xac, 0xff,   /*Color of index 28*/
  0xa8, 0xa9, 0xa7, 0xff,   /*Color of index 29*/
  0xa7, 0xa8, 0xa6, 0xff,   /*Color of index 30*/
  0xa4, 0xa5, 0xa3, 0xff,   /*Color of index 31*/
  0xa0, 0xa1, 0x9f, 0xff,   /*Color of index 32*/
  0x89, 0x8a, 0x87, 0xff,   /*Color of index 33*/
  0x60, 0x61, 0x5f, 0xff,   /*Color of index 34*/
  0xf1, 0xf1, 0xef, 0xff,   /*Color of index 35*/
  0xee, 0xee, 0xed, 0xff,   /*Color of index 36*/
  0xe1, 0xe1, 0xde, 0xff,   /*Color of index 37*/
  0xdf, 0xde, 0xdb, 0xff,   /*Color of index 38*/
  0xdb, 0xdb, 0xda, 0xff,   /*Color of index 39*/
  0xb7, 0xb7, 0xb6, 0xff,   /*Color of index 40*/
  0x8f, 0x8f, 0x8e, 0xff,   /*Color of index 41*/
  0x8b, 0x8b, 0x8a, 0xff,   /*Color of index 42*/
  0x84, 0x84, 0x83, 0xff,   /*Color of index 43*/
  0x6c, 0x6c, 0x6b, 0xff,   /*Color of index 44*/
  0x4f, 0x4f, 0x4e, 0xff,   /*Color of index 45*/
  0x42, 0x42, 0x41, 0xff,   /*Color of index 46*/
  0x3b, 0x3b, 0x3a, 0xff,   /*Color of index 47*/
  0x20, 0x21, 0x1d, 0xff,   /*Color of index 48*/
  0x1b, 0x1b, 0x1a, 0xff,   /*Color of index 49*/
  0x19, 0x19, 0x18, 0xff,   /*Color of index 50*/
  0x12, 0x12, 0x11, 0xff,   /*Color of index 51*/
  0xe9, 0xe8, 0xe6, 0xff,   /*Color of index 52*/
  0xea, 0xe5, 0xe2, 0xff,   /*Color of index 53*/
  0xd1, 0xd0, 0xcf, 0xff,   /*Color of index 54*/
  0xb8, 0xb6, 0xb5, 0xff,   /*Color of index 55*/
  0xb8, 0xa7, 0xa4, 0xff,   /*Color of index 56*/
  0xf3, 0x96, 0x63, 0xff,   /*Color of index 57*/
  0xf0, 0x92, 0x5b, 0xff,   /*Color of index 58*/
  0xec, 0x92, 0x5b, 0xff,   /*Color of index 59*/
  0xf2, 0x8b, 0x53, 0xff,   /*Color of index 60*/
  0xf2, 0x88, 0x4d, 0xff,   /*Color of index 61*/
  0xe6, 0x89, 0x4b, 0xff,   /*Color of index 62*/
  0xf2, 0x85, 0x49, 0xff,   /*Color of index 63*/
  0xea, 0x83, 0x4a, 0xff,   /*Color of index 64*/
  0xe5, 0x84, 0x43, 0xff,   /*Color of index 65*/
  0xf2, 0x80, 0x41, 0xff,   /*Color of index 66*/
  0x9b, 0x7a, 0x71, 0xff,   /*Color of index 67*/
  0xe9, 0x80, 0x41, 0xff,   /*Color of index 68*/
  0xf0, 0x7e, 0x3f, 0xff,   /*Color of index 69*/
  0xe6, 0x7f, 0x3d, 0xff,   /*Color of index 70*/
  0xef, 0x7c, 0x3a, 0xff,   /*Color of index 71*/
  0xf1, 0x7a, 0x39, 0xff,   /*Color of index 72*/
  0xf1, 0x77, 0x35, 0xff,   /*Color of index 73*/
  0xeb, 0x77, 0x32, 0xff,   /*Color of index 74*/
  0xf0, 0x75, 0x33, 0xff,   /*Color of index 75*/
  0xe0, 0x77, 0x2d, 0xff,   /*Color of index 76*/
  0xee, 0x74, 0x2f, 0xff,   /*Color of index 77*/
  0xf1, 0x71, 0x2d, 0xff,   /*Color of index 78*/
  0xec, 0x71, 0x2b, 0xff,   /*Color of index 79*/
  0xf0, 0x6e, 0x28, 0xff,   /*Color of index 80*/
  0xeb, 0x6c, 0x2f, 0xff,   /*Color of index 81*/
  0xef, 0x6d, 0x25, 0xff,   /*Color of index 82*/
  0xef, 0x6c, 0x26, 0xff,   /*Color of index 83*/
  0xf0, 0x69, 0x1f, 0xff,   /*Color of index 84*/
  0xef, 0x62, 0x17, 0xff,   /*Color of index 85*/
  0xcb, 0x64, 0x1b, 0xff,   /*Color of index 86*/
  0xd6, 0x61, 0x16, 0xff,   /*Color of index 87*/
  0xef, 0x5e, 0x12, 0xff,   /*Color of index 88*/
  0xe7, 0x5f, 0x11, 0xff,   /*Color of index 89*/
  0xda, 0x5e, 0x10, 0xff,   /*Color of index 90*/
  0xbe, 0x5d, 0x19, 0xff,   /*Color of index 91*/
  0xe9, 0x5b, 0x0f, 0xff,   /*Color of index 92*/
  0xd4, 0x59, 0x12, 0xff,   /*Color of index 93*/
  0xd9, 0x59, 0x0e, 0xff,   /*Color of index 94*/
  0xe5, 0x58, 0x0d, 0xff,   /*Color of index 95*/
  0xde, 0x56, 0x0e, 0xff,   /*Color of index 96*/
  0xd8, 0x56, 0x10, 0xff,   /*Color of index 97*/
  0xd4, 0x52, 0x0e, 0xff,   /*Color of index 98*/
  0xb8, 0x51, 0x13, 0xff,   /*Color of index 99*/
  0xcb, 0x50, 0x0c, 0xff,   /*Color of index 100*/
  0xa5, 0x4b, 0x15, 0xff,   /*Color of index 101*/
  0xbc, 0x4a, 0x0c, 0xff,   /*Color of index 102*/
  0xb7, 0x48, 0x0a, 0xff,   /*Color of index 103*/
  0xb2, 0x45, 0x0b, 0xff,   /*Color of index 104*/
  0xa2, 0x45, 0x0e, 0xff,   /*Color of index 105*/
  0x57, 0x3f, 0x39, 0xff,   /*Color of index 106*/
  0xa5, 0x42, 0x0b, 0xff,   /*Color of index 107*/
  0x8e, 0x42, 0x11, 0xff,   /*Color of index 108*/
  0xa8, 0x41, 0x0b, 0xff,   /*Color of index 109*/
  0x9f, 0x3f, 0x09, 0xff,   /*Color of index 110*/
  0xa1, 0x3e, 0x0a, 0xff,   /*Color of index 111*/
  0x94, 0x3a, 0x0a, 0xff,   /*Color of index 112*/
  0x8e, 0x38, 0x0a, 0xff,   /*Color of index 113*/
  0x8c, 0x36, 0x09, 0xff,   /*Color of index 114*/
  0x74, 0x36, 0x10, 0xff,   /*Color of index 115*/
  0x7b, 0x31, 0x08, 0xff,   /*Color of index 116*/
  0x7f, 0x31, 0x06, 0xff,   /*Color of index 117*/
  0x2e, 0x2d, 0x2c, 0xff,   /*Color of index 118*/
  0x65, 0x2f, 0x0e, 0xff,   /*Color of index 119*/
  0x77, 0x2e, 0x08, 0xff,   /*Color of index 120*/
  0x73, 0x2d, 0x07, 0xff,   /*Color of index 121*/
  0x6a, 0x2b, 0x07, 0xff,   /*Color of index 122*/
  0x37, 0x26, 0x23, 0xff,   /*Color of index 123*/
  0x55, 0x26, 0x0b, 0xff,   /*Color of index 124*/
  0x62, 0x26, 0x06, 0xff,   /*Color of index 125*/
  0x5e, 0x24, 0x06, 0xff,   /*Color of index 126*/
  0x50, 0x1f, 0x05, 0xff,   /*Color of index 127*/
  0x48, 0x1c, 0x05, 0xff,   /*Color of index 128*/
  0x42, 0x1a, 0x04, 0xff,   /*Color of index 129*/
  0x18, 0x15, 0x14, 0xff,   /*Color of index 130*/
  0x32, 0x14, 0x03, 0xff,   /*Color of index 131*/
  0x2b, 0x11, 0x03, 0xff,   /*Color of index 132*/
  0x12, 0x0f, 0x0e, 0xff,   /*Color of index 133*/
  0x0e, 0x0d, 0x0c, 0xff,   /*Color of index 134*/
  0x24, 0x0d, 0x03, 0xff,   /*Color of index 135*/
  0x1e, 0x0c, 0x01, 0xff,   /*Color of index 136*/
  0x14, 0x08, 0x00, 0xff,   /*Color of index 137*/
  0x10, 0x06, 0x02, 0xff,   /*Color of index 138*/
  0x07, 0x03, 0x02, 0xff,   /*Color of index 139*/
  0x5f, 0x5d, 0x5d, 0xff,   /*Color of index 140*/
  0x27, 0x26, 0x26, 0xff,   /*Color of index 141*/
  0x0a, 0x09, 0x09, 0xff,   /*Color of index 142*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 143*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 144*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 145*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 146*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 147*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 148*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 149*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 150*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 151*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 152*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 153*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 154*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 155*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 156*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 157*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 158*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 159*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 160*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 161*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 162*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 163*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 164*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 165*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 166*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 167*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 168*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 169*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 170*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 171*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 172*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 173*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 174*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 175*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 176*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 177*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 178*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 179*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 180*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 181*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 182*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 183*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 184*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 185*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 186*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 187*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 188*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 189*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 190*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 191*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 192*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 193*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 194*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 195*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 196*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 197*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 198*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 199*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 200*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 201*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 202*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 203*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 204*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 205*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 206*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 207*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 208*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 209*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 210*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 211*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 212*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 213*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 214*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 215*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 216*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 217*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 218*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 219*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 220*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 221*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 222*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 223*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 224*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 225*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 226*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 227*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 228*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 229*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 230*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 231*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 232*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 233*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 234*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 235*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 236*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 237*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 238*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 239*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 240*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 241*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 242*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 243*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 244*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 245*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 246*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 247*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 248*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 249*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 250*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 251*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 252*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 253*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 254*/
  0x00, 0x00, 0x00, 0x00,   /*Color of index 255*/

  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x32, 0x0c, 0x2f, 0x06, 0x2b, 0x10, 0x10, 0x2b, 0x13, 0x2e, 0x76, 0x31, 0x8b, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x16, 0x10, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x0f, 0x0a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x33, 0x2d, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x31, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x33, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x86, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x33, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x2d, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x10, 0x2d, 0x0b, 0x31, 0x86, 0x8b, 0x8b, 0x8e, 0x82, 0x7b, 0x6a, 0x43, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8e, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0d, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x85, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x85, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x2f, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x31, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x33, 0x14, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8b, 0x87, 0x6b, 0x3d, 0x39, 0x3a, 0x3a, 0x3a, 0x3b, 0x63, 0x84, 0x8b, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x8e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x0a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x80, 0x54, 0x42, 0x49, 0x4d, 0x4d, 0x4e, 0x50, 0x50, 0x4f, 0x45, 0x45, 0x4a, 0x77, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x85, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x86, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x69, 0x3f, 0x4d, 0x4f, 0x4e, 0x49, 0x4b, 0x49, 0x49, 0x4a, 0x4e, 0x42, 0x4e, 0x4d, 0x45, 0x57, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0d, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x0a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5d, 0x47, 0x50, 0x49, 0x4b, 0x48, 0x4d, 0x4e, 0x4e, 0x4e, 0x4d, 0x48, 0x3d, 0x49, 0x4e, 0x4f, 0x48, 0x47, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x16, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x49, 0x4d, 0x48, 0x49, 0x50, 0x53, 0x52, 0x67, 0x78, 0x79, 0x6d, 0x48, 0x49, 0x49, 0x48, 0x49, 0x4d, 0x48, 0x45, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x79, 0x48, 0x48, 0x48, 0x4e, 0x50, 0x5c, 0x7f, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x81, 0x64, 0x52, 0x4d, 0x48, 0x48, 0x47, 0x66, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x3c, 0x4d, 0x49, 0x49, 0x52, 0x68, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x72, 0x50, 0x4b, 0x4e, 0x49, 0x3c, 0x8b, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x33, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x6d, 0x47, 0x49, 0x48, 0x52, 0x62, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x68, 0x4d, 0x48, 0x49, 0x47, 0x61, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x8e, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x39, 0x4a, 0x49, 0x4d, 0x50, 0x8b, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x4b, 0x4e, 0x49, 0x4d, 0x4a, 0x8a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x80, 0x3d, 0x49, 0x47, 0x50, 0x71, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x7e, 0x4e, 0x49, 0x4e, 0x52, 0x7d, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x0e, 0x0e, 
  0x0e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x75, 0x42, 0x49, 0x48, 0x50, 0x87, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8b, 0x4d, 0x49, 0x4e, 0x52, 0x70, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8b, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x0e, 
  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x70, 0x47, 0x49, 0x49, 0x4e, 0x89, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8b, 0x58, 0x49, 0x4e, 0x52, 0x68, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  0x06, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x6e, 0x49, 0x49, 0x48, 0x4e, 0x8a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x60, 0x49, 0x4e, 0x52, 0x66, 0x8b, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x21, 0x00, 0x00, 0x00, 0x00, 0x03, 
  0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x71, 0x49, 0x48, 0x49, 0x4d, 0x89, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5f, 0x49, 0x4e, 0x50, 0x66, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
  0x0e, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x79, 0x4b, 0x48, 0x4e, 0x4b, 0x88, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8b, 0x50, 0x49, 0x4e, 0x50, 0x6b, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x0e, 
  0x0e, 0x0e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x81, 0x49, 0x48, 0x50, 0x4b, 0x75, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x81, 0x50, 0x47, 0x4b, 0x50, 0x79, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x33, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x42, 0x49, 0x49, 0x4b, 0x4b, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x4e, 0x4b, 0x49, 0x48, 0x4d, 0x89, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8d, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x6b, 0x4e, 0x48, 0x4b, 0x4d, 0x64, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x6e, 0x49, 0x47, 0x48, 0x4d, 0x5d, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x48, 0x4e, 0x4d, 0x49, 0x4e, 0x6f, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x7a, 0x4b, 0x47, 0x42, 0x4e, 0x4f, 0x8a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x74, 0x4d, 0x4e, 0x49, 0x48, 0x4e, 0x62, 0x83, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x87, 0x68, 0x53, 0x4d, 0x3f, 0x48, 0x4d, 0x6c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5a, 0x4e, 0x50, 0x48, 0x4b, 0x49, 0x50, 0x55, 0x70, 0x7d, 0x7e, 0x72, 0x5c, 0x50, 0x50, 0x4b, 0x45, 0x3f, 0x40, 0x46, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8b, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x16, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x59, 0x4e, 0x4d, 0x48, 0x4e, 0x49, 0x50, 0x50, 0x50, 0x52, 0x53, 0x50, 0x4b, 0x48, 0x4a, 0x42, 0x44, 0x4c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x86, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x16, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8b, 0x69, 0x48, 0x4e, 0x49, 0x4b, 0x47, 0x49, 0x49, 0x4d, 0x4b, 0x48, 0x48, 0x4f, 0x47, 0x41, 0x5b, 0x8a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8e, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x16, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x7c, 0x4d, 0x4b, 0x51, 0x4e, 0x4e, 0x4e, 0x4d, 0x4e, 0x4e, 0x4b, 0x41, 0x3e, 0x73, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x33, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x32, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8b, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8b, 0x80, 0x65, 0x46, 0x44, 0x44, 0x44, 0x3e, 0x3b, 0x56, 0x7c, 0x89, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x86, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x85, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8b, 0x8a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8e, 0x2e, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x31, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x32, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8b, 0x29, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x0c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x05, 0x8d, 0x32, 0x86, 0x8b, 0x0e, 0x0e, 0x8b, 0x8e, 0x82, 0x0d, 0x8c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x31, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x34, 0x25, 0x26, 0x35, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x0d, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x16, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x8d, 0x04, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x0a, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x09, 0x0e, 0x0e, 0x8b, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
  0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0c, 0x09, 0x13, 0x21, 0x1f, 0x1c, 0x1c, 0x1f, 0x10, 0x2c, 0x2d, 0x0b, 0x8e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
};

#define IMG_HEIGHT 41
#define IMG_WIDTH 64
#define START_OF_IMG_CONTENT 1024

void EyeImg()
{
  if (eyeIndex == -1)
  {
    int key1S = digitalRead(BUTTON_1);
    if (buttons[0].currentState != key1S) {
      buttons[0].currentState = key1S;
  
      if (!key1S)
      {
        eyeIndex = 0;
      }
    }
  }
  else
  {
    // slow things down a little bit
    FastLED.delay(10);
    if (eyeIndex == IMG_WIDTH)
    {
      // reset the image
      eyeIndex = -1;
      blackOut();
    }
    else
    {
      for (int i = 0; i< IMG_HEIGHT; i++)
      {
        //pgm_read_word(&tv[j])
        uint16_t indexVal = pgm_read_word(&eye_map[START_OF_IMG_CONTENT + (i*IMG_WIDTH) + eyeIndex]);
        leds[i].setRGB(pgm_read_word(&eye_map[indexVal*4]), pgm_read_word(&eye_map[(indexVal*4) + 1]), pgm_read_word(&eye_map[(indexVal*4) + 2]));
      }
      
      eyeIndex++;
    }
  }
}

